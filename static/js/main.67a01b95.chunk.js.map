{"version":3,"sources":["components/reddit/SubRedditTopPost.js","components/hackerNews/HackerNewsItem.js","components/Assembler.js","components/ApiCalls.js","components/App.js","serviceWorker.js","index.js"],"names":["SubRedditTopPost","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTopPost","fetch","concat","subreddit","then","response","ok","json","Error","result","setState","topPost","data","children","error","state","bind","assertThisInitialized","react_default","a","createElement","className","href","url","title","score","permalink","num_comments","Component","HackerNewsItem","getHackerNewsItem","isLoading","id","hackerNewsItem","_this$state","message","Assembler","assembleList","subreddits","hackerNewsPosts","forEach","chrnPostType","completeListLocal","reduce","arr","v","i","completeList","renderList","map","element","key","src","icon_img","alt","display_name_prefixed","subscribers","reddit_SubRedditTopPost","display_name","hackerNews_HackerNewsItem","ApiCalls","getTopSubreddits","getHackerNewsPosts","slice","length","components_Assembler","App","viewBox","preserveAspectRatio","x","y","textAnchor","components_ApiCalls","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67a01b95.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'styles/App.css';\r\n\r\nclass SubRedditTopPost extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      topPost: [],\r\n      error: null,\r\n    };\r\n\r\n    this.getTopPost = this.getTopPost.bind(this);\r\n  }\r\n\r\n  getTopPost = () =>{\r\n        \r\n      fetch(`https://www.reddit.com/r/${this.props.subreddit}/hot/.json?print=pretty&limit=1`)\r\n      .then(response =>  {    \r\n          if (response.ok) {\r\n            return response.json();\r\n          } else {\r\n            throw new Error('Something went wrong ...');\r\n        }\r\n      })\r\n      .then(result => {\r\n          this.setState({\r\n              topPost: result.data.children[0].data\r\n           });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            error,\r\n          });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.getTopPost();\r\n    }\r\n\r\n    render(){\r\n\r\n      const{topPost} = this.state;\r\n      const BASE_REDDIT_URL = \"https://www.reddit.com\"\r\n\r\n        return(\r\n\r\n          <div className=\"topPostDiv\">\r\n              <a href={topPost.url}>{topPost.title}</a>\r\n              <br />\r\n              {topPost.score} upvotes | <a href={BASE_REDDIT_URL+topPost.permalink}>{topPost.num_comments} comments</a>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SubRedditTopPost;\r\n","import React, { Component } from 'react';\r\nimport 'styles/App.css';\r\n\r\nclass HackerNewsItem extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hackerNewsItem: [],\r\n      isLoading: false,\r\n      error: null,\r\n    };\r\n\r\n    this.getHackerNewsItem = this.getHackerNewsItem.bind(this);\r\n  }\r\n\r\n  getHackerNewsItem = (props) =>{\r\n\r\n    const JSON_QUERY = '.json?print=pretty';\r\n    const BASE_URL = 'https://hacker-news.firebaseio.com/v0';\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(`${BASE_URL}/item/${this.props.id}${JSON_QUERY}`)\r\n    .then(response =>  {    \r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Something went wrong ...');\r\n      }\r\n    })\r\n    .then(result => {\r\n\r\n        this.setState({\r\n            hackerNewsItem: result,\r\n            isLoading: false\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          error,\r\n          isLoading: false\r\n        });\r\n      })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getHackerNewsItem();\r\n  }\r\n\r\n  render() {\r\n    const{hackerNewsItem, isLoading, error} = this.state;\r\n    const HN_ITEM_URL = \"https://news.ycombinator.com/item?id=\";\r\n\r\n    if (error) {\r\n      return <p>{error.message}</p>;\r\n    }\r\n\r\n    if (isLoading) {\r\n      return <p>Loading ...</p>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"hackerNewsItem\">\r\n        <a href={hackerNewsItem.url}>{hackerNewsItem.title}</a><br />\r\n        score: {hackerNewsItem.score}\r\n        <br /><br />\r\n        <a href={HN_ITEM_URL+hackerNewsItem.id}>comments</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HackerNewsItem;\r\n","import React, { Component } from 'react';\r\nimport 'styles/App.css';\r\nimport SubRedditTopPost from 'components/reddit/SubRedditTopPost'\r\nimport HackerNewsItem from 'components/hackerNews/HackerNewsItem'\r\n\r\nclass Assembler extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      completeList: [],\r\n      isLoading: false,\r\n      error: null,\r\n    };\r\n\r\n    this.assembleList = this.assembleList.bind(this);\r\n  }\r\n\r\n  assembleList = (props) =>{\r\n\r\n        this.setState({\r\n            isLoading: true\r\n        }) \r\n\r\n        let subreddits = this.props.subreddits;\r\n        let hackerNewsPosts = this.props.hackerNewsPosts;\r\n\r\n        subreddits.forEach((subreddit) =>{\r\n            subreddit.chrnPostType = \"reddit\";\r\n        })\r\n        \r\n        let completeListLocal = subreddits.reduce(function(arr, v, i) {\r\n            return arr.concat(v, hackerNewsPosts[i]); \r\n         }, []);\r\n\r\n\r\n        this.setState({\r\n            completeList: completeListLocal,\r\n            isLoading: false\r\n        }) \r\n  }\r\n\r\n  renderList = () =>{\r\n\r\n    const completeList = this.state.completeList;\r\n    const BASE_REDDIT_URL = \"https://www.reddit.com\"\r\n\r\n\r\n      return (      \r\n      \r\n      <div className=\"assembler\">\r\n            \r\n        {completeList.map( element =>{\r\n\r\n            if(element.chrnPostType === \"reddit\"){\r\n\r\n               return( <div className=\"liDiv\" key={element.data.id}>\r\n                    <div className=\"liImgDiv\">\r\n                        <img src={element.data.icon_img ? element.data.icon_img : \"https://www.redditstatic.com/icon.png\"} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"li\">\r\n                        <a href={BASE_REDDIT_URL+element.data.url}>{element.data.display_name_prefixed}</a>\r\n                        <br />\r\n                        subs: {element.data.subscribers}\r\n                        <br /><br />\r\n                        <SubRedditTopPost subreddit={element.data.display_name}/>\r\n                    </div>\r\n                </div>)\r\n\r\n            }else{\r\n\r\n                return (<div className=\"liDiv\" key={element}>\r\n                    <div className=\"liImgDiv\">\r\n                      <img src=\"https://pbs.twimg.com/profile_images/378800000011494576/9c90acb704cbf9eef6135009c9bb5657_400x400.png\" alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"li\">\r\n                      <HackerNewsItem id={element}/>\r\n                    </div>\r\n                </div>)\r\n            }})}\r\n             </div>\r\n      )\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.assembleList()\r\n  }\r\n\r\n  render() {\r\n    const {isLoading, error} = this.state;\r\n\r\n    if (error) {\r\n        return <p>{error.message}</p>;\r\n      }\r\n  \r\n      if (isLoading) {\r\n        return <p>Loading ...</p>;\r\n      }\r\n\r\n    return this.renderList();\r\n  }\r\n}\r\n\r\nexport default Assembler;\r\n","import React, { Component } from 'react';\r\nimport 'styles/App.css';\r\nimport Assembler from 'components/Assembler'\r\n\r\nclass ApiCalls extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subreddits: [],\r\n      hackerNewsPosts: [],\r\n      isLoading: false,\r\n      error: null,\r\n    };\r\n\r\n    this.getTopSubreddits = this.getTopSubreddits.bind(this);\r\n    this.getHackerNewsPosts = this.getHackerNewsPosts.bind(this);\r\n  }\r\n\r\n  getTopSubreddits = () =>{\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(\"https://www.reddit.com/subreddits/popular/.json\")\r\n    .then(response =>  {    \r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Something went wrong ...');\r\n      }\r\n    })\r\n    .then(result => {\r\n\r\n        this.setState({\r\n          subreddits: result.data.children,\r\n          isLoading: false\r\n        });\r\n\r\n\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          error,\r\n          isLoading: false\r\n        });\r\n      })\r\n  }\r\n\r\n  getHackerNewsPosts = () =>{\r\n\r\n    const JSON_QUERY = '.json?print=pretty';\r\n    const BASE_URL = 'https://hacker-news.firebaseio.com/v0';\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(`${BASE_URL}/topstories${JSON_QUERY}`)\r\n    .then(response =>  {    \r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Something went wrong ...');\r\n      }\r\n    })\r\n    .then(result => {\r\n\r\n        const slice = result.slice(0, 25);\r\n\r\n        this.setState({\r\n            hackerNewsPosts: slice,\r\n            isLoading: false\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          error,\r\n          isLoading: false\r\n        });\r\n      })\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    this.getTopSubreddits();\r\n    this.getHackerNewsPosts();\r\n  }\r\n\r\n  render() {\r\n    const {subreddits, hackerNewsPosts, isLoading, error} = this.state;\r\n\r\n    if (error) {\r\n        return <p>{error.message}</p>;\r\n      }\r\n  \r\n      if (isLoading) {\r\n        return <p>Loading ...</p>;\r\n      }\r\n\r\n      if(subreddits.length > 0 && hackerNewsPosts.length > 0){\r\n          return (\r\n            <Assembler subreddits={subreddits} hackerNewsPosts={hackerNewsPosts} />\r\n        );\r\n      }\r\n      else{\r\n        return <p>Loading ...</p>;\r\n      }\r\n  }\r\n}\r\n\r\nexport default ApiCalls;\r\n","import React, { Component } from 'react';\r\nimport 'styles/App.css';\r\nimport ApiCalls from 'components/ApiCalls'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      error: null,\r\n    };\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"logoBox\">\r\n            <svg className=\"logoSvg\" viewBox=\"0 0 100 30\" preserveAspectRatio=\"xMaxYMax meet\">\r\n              <text x=\"50\" y=\"20\" textAnchor=\"middle\" className=\"logo\">chrn</text>\r\n            </svg>\r\n          </div>\r\n        </header>\r\n            <div className=\"List\">\r\n              <ApiCalls />\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}